{"ast":null,"code":"var _jsxFileName = \"/Users/chandna/ArtistX/src/CoinList.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\nimport React, { useState } from 'react';\nimport './CoinList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoinList = ({\n  balance,\n  updateBalance,\n  userCoins,\n  curCoins,\n  updateFunction\n}) => {\n  _s();\n  const [quantity, setQuantity] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const buyCoin = coin => {\n    // ... (your buyCoin function logic)\n  };\n  const sellCoin = coin => {\n    // ... (your sellCoin function logic)\n  };\n  function categorizeCoin(coin) {\n    // Customize the categorization logic based on your criteria.\n    const marketCap = coin.marketcap;\n    if (marketCap < 1e9) {\n      return 'Newest Artists'; // Coins with market cap less than 1 billion\n    } else if (marketCap < 1e10) {\n      return 'Top Gainers'; // Coins with market cap between 1 billion and 10 billion\n    } else if (marketCap < 1e11) {\n      return 'Large Cap'; // Coins with market cap between 10 billion and 100 billion\n    } else {\n      return 'Most Traded'; // Coins with market cap greater than or equal to 100 billion\n    }\n  }\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [],\n    // Initialize as an empty array for dynamic content\n    'Most Traded': []\n  };\n  const artistData = {\n    'Drake': {\n      image: 'url_to_drake_image',\n      marketCap: 10000000000,\n      timeOnPlatform: 100,\n      growth: 1,\n      buys: 50,\n      sells: 30\n    },\n    'Adele': {\n      image: 'url_to_adele_image',\n      marketCap: 8000000000,\n      timeOnPlatform: 365,\n      growth: 1.3,\n      buys: 30,\n      sells: 40\n    },\n    'Ed Sheeran': {\n      image: 'url_to_ed_sheeran_image',\n      marketCap: 9500000000,\n      timeOnPlatform: 485,\n      growth: 0.67,\n      buys: 45,\n      sells: 25\n    },\n    'Div': {\n      image: 'url_to_div_image',\n      marketCap: 7500000000,\n      timeOnPlatform: 234,\n      growth: 0.98,\n      buys: 20,\n      sells: 60\n    },\n    'Kanye': {\n      image: 'url_to_kanye_image',\n      marketCap: 12000000000,\n      timeOnPlatform: 128,\n      growth: 1.2,\n      buys: 70,\n      sells: 25\n    },\n    'Ariana Grande': {\n      image: 'url_to_ariana_grande_image',\n      marketCap: 11000000000,\n      timeOnPlatform: 236,\n      growth: 1.11,\n      buys: 60,\n      sells: 35\n    },\n    'Taylor Swift': {\n      image: 'url_to_taylor_swift_image',\n      marketCap: 10500000000,\n      timeOnPlatform: 1934,\n      growth: 1.05,\n      buys: 80,\n      sells: 15\n    },\n    'ArtistX': {\n      image: 'url_to_artistx_image',\n      marketCap: 12500000000,\n      timeOnPlatform: 423,\n      growth: 1.0223,\n      buys: 55,\n      sells: 40\n    },\n    'Beyoncé': {\n      image: 'url_to_beyonce_image',\n      marketCap: 8500000000,\n      timeOnPlatform: 1023,\n      growth: 1.06,\n      buys: 75,\n      sells: 30\n    },\n    'Justin Bieber': {\n      image: 'url_to_justin_bieber_image',\n      marketCap: 9000000000,\n      timeOnPlatform: 24,\n      growth: 0.98,\n      buys: 40,\n      sells: 45\n    },\n    'Rihanna': {\n      image: 'url_to_rihanna_image',\n      marketCap: 9500000000,\n      timeOnPlatform: 191,\n      growth: 0.96,\n      buys: 70,\n      sells: 20\n    },\n    'Eminem': {\n      image: 'url_to_eminem_image',\n      marketCap: 10500000000,\n      timeOnPlatform: 10500000000,\n      growth: 0.94,\n      buys: 95,\n      sells: 40\n    },\n    'Lady Gaga': {\n      image: 'url_to_lady_gaga_image',\n      marketCap: 10000000000,\n      timeOnPlatform: 782,\n      growth: 0.99,\n      buys: 85,\n      sells: 55\n    },\n    'The Weeknd': {\n      image: 'url_to_the_weeknd_image',\n      marketCap: 9900000000,\n      timeOnPlatform: 237,\n      growth: 0.995,\n      buys: 65,\n      sells: 35\n    }\n  };\n  // Dictionary to map artists to their market cap\n  const artistMarketCaps = {\n    'Drake': 10000000000,\n    'Adele': 8000000000,\n    'Ed Sheeran': 9500000000,\n    'Div': 7500000000,\n    'Kanye': 12000000000,\n    'Ariana Grande': 11000000000,\n    'Taylor Swift': 10500000000,\n    'ArtistX': 12500000000,\n    'Beyoncé': 8500000000,\n    'Justin Bieber': 9000000000,\n    'Rihanna': 9500000000,\n    'Eminem': 10500000000,\n    'Lady Gaga': 10000000000,\n    'The Weeknd': 9900000000\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData).sort((a, b) => artistData['marketCap'][b] - artistData['marketCap'][a]).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n  const timeOnPlatform = {\n    'Drake': 100,\n    'Adele': 365,\n    'Ed Sheeran': 485,\n    'Div': 234,\n    'Kanye': 128,\n    'Ariana Grande': 236,\n    'Taylor Swift': 1934,\n    'ArtistX': 423,\n    'Beyoncé': 1023,\n    'Justin Bieber': 24,\n    'Rihanna': 191,\n    'Eminem': 10500000000,\n    'Lady Gaga': 782,\n    'The Weeknd': 237\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(timeOnPlatform).sort((a, b) => artistMarketCaps[a] - artistMarketCaps[b]).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n  const growth = {\n    'Drake': 1,\n    'Adele': 1.3,\n    'Ed Sheeran': 0.67,\n    'Div': 0.98,\n    'Kanye': 1.2,\n    'Ariana Grande': 1.11,\n    'Taylor Swift': 1.05,\n    'ArtistX': 1.0223,\n    'Beyoncé': 1.06,\n    'Justin Bieber': .98,\n    'Rihanna': 0.96,\n    'Eminem': 0.94,\n    'Lady Gaga': 0.99,\n    'The Weeknd': 0.995\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(growth).sort((a, b) => artistMarketCaps[b] - artistMarketCaps[a]).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n  const buys = {\n    'Drake': 50,\n    'Adele': 30,\n    'Ed Sheeran': 45,\n    'Div': 20,\n    'Kanye': 70,\n    'Ariana Grande': 60,\n    'Taylor Swift': 80,\n    'ArtistX': 55,\n    'Beyoncé': 75,\n    'Justin Bieber': 40,\n    'Rihanna': 70,\n    'Eminem': 95,\n    'Lady Gaga': 85,\n    'The Weeknd': 65\n  };\n  const sells = {\n    'Drake': 30,\n    'Adele': 40,\n    'Ed Sheeran': 25,\n    'Div': 60,\n    'Kanye': 25,\n    'Ariana Grande': 35,\n    'Taylor Swift': 15,\n    'ArtistX': 40,\n    'Beyoncé': 30,\n    'Justin Bieber': 45,\n    'Rihanna': 20,\n    'Eminem': 40,\n    'Lady Gaga': 55,\n    'The Weeknd': 35\n  };\n\n  // Combine buys and sells to calculate total trades\n  const trades = {};\n  for (const artist in buys) {\n    trades[artist] = buys[artist] + sells[artist];\n  }\n\n  // Sort artists by the total number of trades\n  const mostTradedArtists = Object.keys(trades).sort((a, b) => trades[b] - trades[a]).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Most Traded' category with the sorted artists\n  categorizedCoins['Most Traded'] = mostTradedArtists;\n  const coins = {\n    'Drake': 10,\n    'Adele': 15,\n    'Ed Sheeran': 16,\n    'Div': 14,\n    'ArtistX': 22\n  };\n  const toggleCategoryExpansion = category => {\n    setExpandedCategories(prevExpanded => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Coins\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), Object.entries(categorizedCoins).map(([category, artistsInCategory]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [category, \" - Top 3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleCategoryExpansion(category),\n        children: expandedCategories[category] ? 'See Less' : 'See All'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), expandedCategories[category] ? artistsInCategory.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: artist.image,\n          alt: artist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: quantity,\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => buyCoin(artist.name),\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sellCoin(artist.name),\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }, this)) : artistsInCategory.slice(0, 3).map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: artist.image,\n          alt: artist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: quantity,\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => buyCoin(artist.name),\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sellCoin(artist.name),\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this))]\n    }, category, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }, this);\n};\n_s(CoinList, \"MpnbtMbAJATn47Bfr8SrFsLEYLE=\");\n_c = CoinList;\nexport default CoinList;\nvar _c;\n$RefreshReg$(_c, \"CoinList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CoinList","balance","updateBalance","userCoins","curCoins","updateFunction","_s","quantity","setQuantity","expandedCategories","setExpandedCategories","buyCoin","coin","sellCoin","categorizeCoin","marketCap","marketcap","categorizedCoins","artistData","image","timeOnPlatform","growth","buys","sells","artistMarketCaps","largeCapArtists","Object","keys","sort","a","b","map","name","newestArtists","topGainers","trades","artist","mostTradedArtists","coins","toggleCategoryExpansion","category","prevExpanded","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","artistsInCategory","onClick","index","src","alt","type","value","onChange","e","target","slice","_c","$RefreshReg$"],"sources":["/Users/chandna/ArtistX/src/CoinList.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\n\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [quantity, setQuantity] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState({});\n\n  const buyCoin = (coin) => {\n    // ... (your buyCoin function logic)\n  };\n\n  const sellCoin = (coin) => {\n    // ... (your sellCoin function logic)\n  };\n\n  function categorizeCoin(coin) {\n    // Customize the categorization logic based on your criteria.\n    const marketCap = coin.marketcap;\n\n    if (marketCap < 1e9) {\n      return 'Newest Artists'; // Coins with market cap less than 1 billion\n    } else if (marketCap < 1e10) {\n      return 'Top Gainers'; // Coins with market cap between 1 billion and 10 billion\n    } else if (marketCap < 1e11) {\n      return 'Large Cap'; // Coins with market cap between 10 billion and 100 billion\n    } else {\n      return 'Most Traded'; // Coins with market cap greater than or equal to 100 billion\n    }\n  }\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [], // Initialize as an empty array for dynamic content\n    'Most Traded': [],\n  };\n\n\n\n  const artistData = {\n    'Drake': {\n      image: 'url_to_drake_image',\n      marketCap: 10000000000,\n      timeOnPlatform: 100,\n      growth: 1,\n      buys: 50,\n      sells: 30,\n    },\n    'Adele': {\n      image: 'url_to_adele_image',\n      marketCap: 8000000000,\n      timeOnPlatform: 365,\n      growth: 1.3,\n      buys: 30,\n      sells: 40,\n    },\n    'Ed Sheeran': {\n      image: 'url_to_ed_sheeran_image',\n      marketCap: 9500000000,\n      timeOnPlatform: 485,\n      growth: 0.67,\n      buys: 45,\n      sells: 25,\n    },\n    'Div': {\n      image: 'url_to_div_image',\n      marketCap: 7500000000,\n      timeOnPlatform: 234,\n      growth: 0.98,\n      buys: 20,\n      sells: 60,\n    },\n    'Kanye': {\n      image: 'url_to_kanye_image',\n      marketCap: 12000000000,\n      timeOnPlatform: 128,\n      growth: 1.2,\n      buys: 70,\n      sells: 25,\n    },\n    'Ariana Grande': {\n      image: 'url_to_ariana_grande_image',\n      marketCap: 11000000000,\n      timeOnPlatform: 236,\n      growth: 1.11,\n      buys: 60,\n      sells: 35,\n    },\n    'Taylor Swift': {\n      image: 'url_to_taylor_swift_image',\n      marketCap: 10500000000,\n      timeOnPlatform: 1934,\n      growth: 1.05,\n      buys: 80,\n      sells: 15,\n    },\n    'ArtistX': {\n      image: 'url_to_artistx_image',\n      marketCap: 12500000000,\n      timeOnPlatform: 423,\n      growth: 1.0223,\n      buys: 55,\n      sells: 40,\n    },\n    'Beyoncé': {\n      image: 'url_to_beyonce_image',\n      marketCap: 8500000000,\n      timeOnPlatform: 1023,\n      growth: 1.06,\n      buys: 75,\n      sells: 30,\n    },\n    'Justin Bieber': {\n      image: 'url_to_justin_bieber_image',\n      marketCap: 9000000000,\n      timeOnPlatform: 24,\n      growth: 0.98,\n      buys: 40,\n      sells: 45,\n    },\n    'Rihanna': {\n      image: 'url_to_rihanna_image',\n      marketCap: 9500000000,\n      timeOnPlatform: 191,\n      growth: 0.96,\n      buys: 70,\n      sells: 20,\n    },\n    'Eminem': {\n      image: 'url_to_eminem_image',\n      marketCap: 10500000000,\n      timeOnPlatform: 10500000000,\n      growth: 0.94,\n      buys: 95,\n      sells: 40,\n    },\n    'Lady Gaga': {\n      image: 'url_to_lady_gaga_image',\n      marketCap: 10000000000,\n      timeOnPlatform: 782,\n      growth: 0.99,\n      buys: 85,\n      sells: 55,\n    },\n    'The Weeknd': {\n      image: 'url_to_the_weeknd_image',\n      marketCap: 9900000000,\n      timeOnPlatform: 237,\n      growth: 0.995,\n      buys: 65,\n      sells: 35,\n    },\n  };\n  // Dictionary to map artists to their market cap\n  const artistMarketCaps = {\n    'Drake': 10000000000,\n    'Adele': 8000000000,\n    'Ed Sheeran': 9500000000,\n    'Div': 7500000000,\n    'Kanye': 12000000000,\n    'Ariana Grande': 11000000000,\n    'Taylor Swift': 10500000000,\n    'ArtistX': 12500000000,\n    'Beyoncé': 8500000000,\n    'Justin Bieber': 9000000000,\n    'Rihanna': 9500000000,\n    'Eminem': 10500000000,\n    'Lady Gaga': 10000000000,\n    'The Weeknd': 9900000000,\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData)\n    .sort((a, b) => artistData['marketCap'][b] - artistData['marketCap'][a])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n\n\n  const timeOnPlatform = {\n    'Drake': 100,\n    'Adele': 365,\n    'Ed Sheeran': 485,\n    'Div': 234,\n    'Kanye': 128,\n    'Ariana Grande': 236,\n    'Taylor Swift': 1934,\n    'ArtistX': 423,\n    'Beyoncé': 1023,\n    'Justin Bieber': 24,\n    'Rihanna': 191,\n    'Eminem': 10500000000,\n    'Lady Gaga': 782,\n    'The Weeknd': 237,\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(timeOnPlatform)\n    .sort((a, b) => artistMarketCaps[a] - artistMarketCaps[b])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n\n  const growth = {\n    'Drake': 1,\n    'Adele': 1.3,\n    'Ed Sheeran': 0.67,\n    'Div': 0.98,\n    'Kanye': 1.2,\n    'Ariana Grande': 1.11,\n    'Taylor Swift': 1.05,\n    'ArtistX': 1.0223,\n    'Beyoncé': 1.06,\n    'Justin Bieber': .98,\n    'Rihanna': 0.96,\n    'Eminem': 0.94,\n    'Lady Gaga': 0.99,\n    'The Weeknd': 0.995,\n  };\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(growth)\n    .sort((a, b) => artistMarketCaps[b] - artistMarketCaps[a])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n\n  const buys = {\n    'Drake': 50,\n    'Adele': 30,\n    'Ed Sheeran': 45,\n    'Div': 20,\n    'Kanye': 70,\n    'Ariana Grande': 60,\n    'Taylor Swift': 80,\n    'ArtistX': 55,\n    'Beyoncé': 75,\n    'Justin Bieber': 40,\n    'Rihanna': 70,\n    'Eminem': 95,\n    'Lady Gaga': 85,\n    'The Weeknd': 65,\n  };\n\n  const sells = {\n    'Drake': 30,\n    'Adele': 40,\n    'Ed Sheeran': 25,\n    'Div': 60,\n    'Kanye': 25,\n    'Ariana Grande': 35,\n    'Taylor Swift': 15,\n    'ArtistX': 40,\n    'Beyoncé': 30,\n    'Justin Bieber': 45,\n    'Rihanna': 20,\n    'Eminem': 40,\n    'Lady Gaga': 55,\n    'The Weeknd': 35,\n  };\n\n  // Combine buys and sells to calculate total trades\n  const trades = {};\n  for (const artist in buys) {\n    trades[artist] = buys[artist] + sells[artist];\n  }\n\n  // Sort artists by the total number of trades\n  const mostTradedArtists = Object.keys(trades)\n    .sort((a, b) => trades[b] - trades[a])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Most Traded' category with the sorted artists\n  categorizedCoins['Most Traded'] = mostTradedArtists;\n\n  const coins = {\n    'Drake': 10,\n    'Adele': 15,\n    'Ed Sheeran': 16,\n    'Div': 14,\n    'ArtistX': 22,\n  };\n\n  const toggleCategoryExpansion = (category) => {\n    setExpandedCategories((prevExpanded) => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category],\n    }));\n  };\n\n  return (\n    <div className=\"coin-list\">\n      <h2>Available Coins</h2>\n      {Object.entries(categorizedCoins).map(([category, artistsInCategory]) => (\n        <div key={category}>\n          <h3>\n            {category} - Top 3\n          </h3>\n          <button onClick={() => toggleCategoryExpansion(category)}>\n            {expandedCategories[category] ? 'See Less' : 'See All'}\n          </button>\n          <h5></h5>\n          {expandedCategories[category]\n            ? artistsInCategory.map((artist, index) => (\n                <div key={index} className=\"coin-item\">\n                  <img src={artist.image} alt={artist.name} />\n                  <input\n                    type=\"text\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                  />\n                  <button onClick={() => buyCoin(artist.name)}>Buy</button>\n                  <button onClick={() => sellCoin(artist.name)}>Sell</button>\n                </div>\n              ))\n            : artistsInCategory.slice(0, 3).map((artist, index) => (\n                <div key={index} className=\"coin-item\">\n                  <img src={artist.image} alt={artist.name} />\n                  <input\n                    type=\"text\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                  />\n                  <button onClick={() => buyCoin(artist.name)}>Buy</button>\n                  <button onClick={() => sellCoin(artist.name)}>Sell</button>\n                </div>\n              ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}