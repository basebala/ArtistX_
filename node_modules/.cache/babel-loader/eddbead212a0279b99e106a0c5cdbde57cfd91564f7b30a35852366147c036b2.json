{"ast":null,"code":"var _jsxFileName = \"/Users/chandna/ArtistX/src/CoinList.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\nimport React, { useState } from 'react';\nimport './CoinList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoinList = ({\n  balance,\n  updateBalance,\n  userCoins,\n  curCoins,\n  updateFunction\n}) => {\n  _s();\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const buyCoin = coin => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue / coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map(c => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = c.price * quantityValue / c.marketcap; // Simulate a price change between -5 and +5\n          return {\n            ...c,\n            price: c.price + priceChange,\n            marketcap: c.marketcap + priceChange * 1000\n          };\n        }\n        return c;\n      });\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    }\n  };\n\n  const sellCoin = coin => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue / coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map(c => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = c.price * quantityValue / c.marketcap; // Simulate a price change between -5 and +5\n          return {\n            ...c,\n            price: c.price - priceChange,\n            marketcap: c.marketcap - priceChange * 1000\n          };\n        }\n        return c;\n      });\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    }\n  };\n\n  // Categorize the coins\n  const categorizedCoins = {\n    'Trending Now': [],\n    'Top Gainers': [],\n    'Large Cap': [],\n    'Most Traded': []\n  };\n  coins.forEach(coin => {\n    const category = categorizeCoin(coin); // Function to categorize coins\n\n    if (category in categorizedCoins) {\n      categorizedCoins[category].push(coin);\n    }\n  });\n  const toggleCategoryExpansion = category => {\n    setExpandedCategories(prevExpanded => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Coins\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), Object.entries(categorizedCoins).map(([category, coinsInCategory]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [category, \" - Top 3\", coinsInCategory.length > 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleCategoryExpansion(category),\n          children: expandedCategories[category] ? 'See Less' : 'See All'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), expandedCategories[category] ? coinsInCategory.map((coin, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: quantity,\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => buyCoin(coin),\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sellCoin(coin),\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)) : coinsInCategory.slice(0, 3).map((coin, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coin-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: quantity,\n          onChange: e => setQuantity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => buyCoin(coin),\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => sellCoin(coin),\n          children: \"Sell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 19\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this))]\n    }, category, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(CoinList, \"aLyHHeE/W+NqwszoBI4Wf5k9HjI=\");\n_c = CoinList;\nexport default CoinList;\nvar _c;\n$RefreshReg$(_c, \"CoinList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CoinList","balance","updateBalance","userCoins","curCoins","updateFunction","_s","coins","setCoins","quantity","setQuantity","expandedCategories","setExpandedCategories","buyCoin","coin","quantityValue","parseFloat","isNaN","symbol","price","alert","name","updatedCoins","map","c","priceChange","marketcap","sellCoin","categorizedCoins","forEach","category","categorizeCoin","push","toggleCategoryExpansion","prevExpanded","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","coinsInCategory","length","onClick","index","type","value","onChange","e","target","slice","_c","$RefreshReg$"],"sources":["/Users/chandna/ArtistX/src/CoinList.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n  const [expandedCategories, setExpandedCategories] = useState({});\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    }\n  };\n\n  // Categorize the coins\n  const categorizedCoins = {\n    'Trending Now': [],\n    'Top Gainers': [],\n    'Large Cap': [],\n    'Most Traded': [],\n  };\n\n  coins.forEach((coin) => {\n    const category = categorizeCoin(coin); // Function to categorize coins\n\n    if (category in categorizedCoins) {\n      categorizedCoins[category].push(coin);\n    }\n  });\n\n  const toggleCategoryExpansion = (category) => {\n    setExpandedCategories((prevExpanded) => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category],\n    }));\n  };\n\n  return (\n    <div className=\"coin-list\">\n      <h2>Available Coins</h2>\n      {Object.entries(categorizedCoins).map(([category, coinsInCategory]) => (\n        <div key={category}>\n          <h3>\n            {category} - Top 3\n            {coinsInCategory.length > 3 && (\n              <button onClick={() => toggleCategoryExpansion(category)}>\n                {expandedCategories[category] ? 'See Less' : 'See All'}\n              </button>\n            )}\n          </h3>\n          {expandedCategories[category]\n            ? coinsInCategory.map((coin, index) => (\n                <div key={index} className=\"coin-item\">\n                  {/* ... (same coin information as your original code) */}\n                  <input\n                    type=\"text\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                  />\n                  <button onClick={() => buyCoin(coin)}>Buy</button>\n                  <button onClick={() => sellCoin(coin)}>Sell</button>\n                </div>\n              ))\n            : coinsInCategory.slice(0, 3).map((coin, index) => (\n                <div key={index} className=\"coin-item\">\n                  {/* ... (same coin information as your original code) */}\n                  <input\n                    type=\"text\"\n                    value={quantity}\n                    onChange={(e) => setQuantity(e.target.value)}\n                  />\n                  <button onClick={() => buyCoin(coin)}>Buy</button>\n                  <button onClick={() => sellCoin(coin)}>Sell</button>\n                </div>\n              ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa;EAAEC,SAAS;EAAEC,QAAQ;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACpF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACO,QAAQ,CAAC;EAC5C,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhE,MAAMgB,OAAO,GAAIC,IAAI,IAAK;IACxB,MAAMC,aAAa,GAAGC,UAAU,CAACP,QAAQ,CAAC,CAAC,CAAC;;IAE5C,IAAI,CAACQ,KAAK,CAACF,aAAa,CAAC,IAAId,OAAO,IAAIc,aAAa,EAAE;MACrDb,aAAa,CAAC,CAACa,aAAa,EAAED,IAAI,CAACI,MAAM,EAAEH,aAAa,GAACD,IAAI,CAACK,KAAK,CAAC;MACpEC,KAAK,CAAE,iBAAgBL,aAAc,aAAYD,IAAI,CAACO,IAAK,QAAO,CAAC;;MAEnE;MACA,MAAMC,YAAY,GAAGf,KAAK,CAACgB,GAAG,CAAEC,CAAC,IAAK;QACpC,IAAIA,CAAC,CAACN,MAAM,KAAKJ,IAAI,CAACI,MAAM,EAAE;UAC5B,MAAMO,WAAW,GAAID,CAAC,CAACL,KAAK,GAAGJ,aAAa,GAAIS,CAAC,CAACE,SAAS,CAAC,CAAC;UAC7D,OAAO;YAAE,GAAGF,CAAC;YAAEL,KAAK,EAAEK,CAAC,CAACL,KAAK,GAAGM,WAAW;YAAEC,SAAS,EAAEF,CAAC,CAACE,SAAS,GAAGD,WAAW,GAAG;UAAK,CAAC;QAC5F;QACA,OAAOD,CAAC;MACV,CAAC,CAAC;MAEFhB,QAAQ,CAACc,YAAY,CAAC;MACtBjB,cAAc,CAACiB,YAAY,CAAC;MAC5BZ,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB;EACF,CAAC;;EAED,MAAMiB,QAAQ,GAAIb,IAAI,IAAK;IACzB,MAAMC,aAAa,GAAGC,UAAU,CAACP,QAAQ,CAAC,CAAC,CAAC;;IAE5C,IAAI,CAACQ,KAAK,CAACF,aAAa,CAAC,IAAIZ,SAAS,CAACW,IAAI,CAACI,MAAM,CAAC,GAAGJ,IAAI,CAACK,KAAK,IAAIJ,aAAa,EAAE;MACjFb,aAAa,CAACa,aAAa,EAAED,IAAI,CAACI,MAAM,EAAE,CAACH,aAAa,GAACD,IAAI,CAACK,KAAK,CAAC;MACpEC,KAAK,CAAE,eAAcL,aAAc,aAAYD,IAAI,CAACO,IAAK,QAAO,CAAC;MACjE;MACA,MAAMC,YAAY,GAAGf,KAAK,CAACgB,GAAG,CAAEC,CAAC,IAAK;QACpC,IAAIA,CAAC,CAACN,MAAM,KAAKJ,IAAI,CAACI,MAAM,EAAE;UAC5B,MAAMO,WAAW,GAAID,CAAC,CAACL,KAAK,GAAGJ,aAAa,GAAIS,CAAC,CAACE,SAAS,CAAC,CAAC;UAC7D,OAAO;YAAE,GAAGF,CAAC;YAAEL,KAAK,EAAEK,CAAC,CAACL,KAAK,GAAGM,WAAW;YAAEC,SAAS,EAAEF,CAAC,CAACE,SAAS,GAAGD,WAAW,GAAG;UAAK,CAAC;QAC5F;QACA,OAAOD,CAAC;MACV,CAAC,CAAC;MAEFhB,QAAQ,CAACc,YAAY,CAAC;MACtBjB,cAAc,CAACiB,YAAY,CAAC;MAC5BZ,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMkB,gBAAgB,GAAG;IACvB,cAAc,EAAE,EAAE;IAClB,aAAa,EAAE,EAAE;IACjB,WAAW,EAAE,EAAE;IACf,aAAa,EAAE;EACjB,CAAC;EAEDrB,KAAK,CAACsB,OAAO,CAAEf,IAAI,IAAK;IACtB,MAAMgB,QAAQ,GAAGC,cAAc,CAACjB,IAAI,CAAC,CAAC,CAAC;;IAEvC,IAAIgB,QAAQ,IAAIF,gBAAgB,EAAE;MAChCA,gBAAgB,CAACE,QAAQ,CAAC,CAACE,IAAI,CAAClB,IAAI,CAAC;IACvC;EACF,CAAC,CAAC;EAEF,MAAMmB,uBAAuB,GAAIH,QAAQ,IAAK;IAC5ClB,qBAAqB,CAAEsB,YAAY,KAAM;MACvC,GAAGA,YAAY;MACf,CAACJ,QAAQ,GAAG,CAACI,YAAY,CAACJ,QAAQ;IACpC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACE/B,OAAA;IAAKoC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBrC,OAAA;MAAAqC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBC,MAAM,CAACC,OAAO,CAACd,gBAAgB,CAAC,CAACL,GAAG,CAAC,CAAC,CAACO,QAAQ,EAAEa,eAAe,CAAC,kBAChE5C,OAAA;MAAAqC,QAAA,gBACErC,OAAA;QAAAqC,QAAA,GACGN,QAAQ,EAAC,UACV,EAACa,eAAe,CAACC,MAAM,GAAG,CAAC,iBACzB7C,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMZ,uBAAuB,CAACH,QAAQ,CAAE;UAAAM,QAAA,EACtDzB,kBAAkB,CAACmB,QAAQ,CAAC,GAAG,UAAU,GAAG;QAAS;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACJ7B,kBAAkB,CAACmB,QAAQ,CAAC,GACzBa,eAAe,CAACpB,GAAG,CAAC,CAACT,IAAI,EAAEgC,KAAK,kBAC9B/C,OAAA;QAAiBoC,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAEpCrC,OAAA;UACEgD,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEvC,QAAS;UAChBwC,QAAQ,EAAGC,CAAC,IAAKxC,WAAW,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,eACFzC,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMhC,OAAO,CAACC,IAAI,CAAE;UAAAsB,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClDzC,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMlB,QAAQ,CAACb,IAAI,CAAE;UAAAsB,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAR5CM,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CACN,CAAC,GACFG,eAAe,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC7B,GAAG,CAAC,CAACT,IAAI,EAAEgC,KAAK,kBAC1C/C,OAAA;QAAiBoC,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAEpCrC,OAAA;UACEgD,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEvC,QAAS;UAChBwC,QAAQ,EAAGC,CAAC,IAAKxC,WAAW,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,eACFzC,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMhC,OAAO,CAACC,IAAI,CAAE;UAAAsB,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClDzC,OAAA;UAAQ8C,OAAO,EAAEA,CAAA,KAAMlB,QAAQ,CAACb,IAAI,CAAE;UAAAsB,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAR5CM,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CACN,CAAC;IAAA,GAjCEV,QAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAkCb,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClC,EAAA,CAjHIN,QAAQ;AAAAqD,EAAA,GAARrD,QAAQ;AAmHd,eAAeA,QAAQ;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}