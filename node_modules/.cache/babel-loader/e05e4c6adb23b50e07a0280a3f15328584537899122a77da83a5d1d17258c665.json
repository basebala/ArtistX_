{"ast":null,"code":"var _jsxFileName = \"/Users/chandna/ArtistX/src/CoinList.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './CoinList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoinList = () => {\n  _s();\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const [curArtist, setCurArtist] = useState(null); // New state to track the selected artist\n  const [followers, setEm] = useState(0);\n  const [token, setToken] = useState(\"BQAS0gIidNDWLb1s-DguNT6ouDvFsBZFkl2geAG7p1C_umEa7XsFNXvGok7qTmC2zImEVL814jDdY_YEALRJMH8p9TceTGSjadJ-lLTQ7dqjKfSw0W5xASwIfyKd01YBbI3WHFD7kLGv_WVqYkLScWZ95tm62boMkLLBTQsE6E8abnMJdXI03hrlXIiS7EM\");\n  const [buyAmount, setBuyAmount] = useState('');\n  const [sellAmount, setSellAmount] = useState('');\n  const [balance, setBalance] = useState(10000);\n  const selectArtist = artist => {\n    // Set the current artist when an artist is selected\n    setCurArtist(artist);\n  };\n  const handleClick = () => {\n    axios.get('http://127.0.0.1:5000/api/getData').then(response => {\n      setData(response.data.artistData);\n      setBalance(response.data.balance);\n    }).catch(error => {\n      setData(\"blocked\");\n    });\n  };\n  const resetArtist = () => {\n    // Set the current artist when an artist is selected\n    setCurArtist(null);\n  };\n  const setFollowers = followers => {\n    setEm(followers);\n  };\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [],\n    // Initialize as an empty array for dynamic content\n    'Most Traded': []\n  };\n  const [artistData, setData] = useState(null);\n  if (artistData == null) {\n    handleClick();\n    return 1;\n  }\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData).sort((a, b) => artistData[b]['marketCap'] - artistData[a]['marketCap']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(artistData).sort((a, b) => artistData[a]['timeOnPlatform'] - artistData[b]['timeOnPlatform']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(artistData).sort((a, b) => artistData[b]['growth'] - artistData[a]['growth']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n  const mostTraded = Object.keys(artistData).sort((a, b) => artistData[b]['sells'] + artistData[b]['buys'] - artistData[a]['buys'] - artistData[a]['sells']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Most Traded'] = mostTraded;\n\n  // Combine buys and sells to calculate total trades\n\n  const toggleCategoryExpansion = category => {\n    setExpandedCategories(prevExpanded => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category]\n    }));\n  };\n  const ArtistTab = async () => {\n    const {\n      data\n    } = await axios.get(\"https://api.spotify.com/v1/search\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: {\n        q: curArtist,\n        type: \"artist\"\n      }\n    });\n    setFollowers(data.artists.items[0].followers.total);\n  };\n\n  /*\n  const ArtistTab2 = () => {\n    return (\n      <div>\n        <h2>{curArtist}</h2>\n        <h3>Total Followers: {followers.toLocaleString('en-US')}</h3>\n        <button onClick={resetArtist}>Back to Lobby</button>\n        <input\n          type=\"number\"\n          placeholder=\"Buy Amount\"\n          value={buyAmount}\n          onChange={(e) => setBuyAmount(e.target.value)}\n        />\n        <button onClick={handleBuy}>Buy</button>\n        <input\n          type=\"number\"\n          placeholder=\"Sell Amount\"\n          value={sellAmount}\n          onChange={(e) => setSellAmount(e.target.value)}\n        />\n        <button onClick={handleSell}>Sell</button>\n      </div>\n    );\n  };\n  */\n\n  const ArtistTab2 = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: curArtist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Followers: \", followers.toLocaleString('en-US')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetArtist,\n        children: \"Back to Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Buy Amount\",\n        value: buyAmount,\n        onChange: e => setBuyAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBuy,\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Sell Amount\",\n        value: sellAmount,\n        onChange: e => setSellAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSell,\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"funnel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funnel-level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funnel-level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funnel-level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funnel-level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"funnel-level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  };\n  const handleBuy = () => {\n    const buyValue = parseInt(buyAmount);\n    if (balance - buyValue * artistData[curArtist]['price'] >= 0) {\n      axios.get('http://127.0.0.1:5000/api/buy', {\n        params: {\n          artist: curArtist,\n          buyAmount: buyValue\n        }\n      }).then(response => {\n        // Handle the response data\n        setData(response.data.artistData);\n        setBalance(response.data.balance);\n      }).catch(error => {\n        // Handle errors\n        console.error('Error:', error);\n      });\n    } else {\n      alert('not enough balance to buy this amount!');\n    }\n  };\n  const handleSell = () => {\n    const sellValue = parseInt(sellAmount);\n    if (artistData[curArtist]['held'] >= sellValue) {\n      axios.get('http://127.0.0.1:5000/api/sell', {\n        params: {\n          artist: curArtist,\n          sellAmount: sellValue\n        }\n      }).then(response => {\n        // Handle the response data\n        setData(response.data.artistData);\n        setBalance(response.data.balance);\n      }).catch(error => {\n        // Handle errors\n        console.error('Error:', error);\n      });\n    } else {\n      alert('not enough coins to sell this amount!');\n    }\n  };\n  if (curArtist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Balance: $\", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"available\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Coins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), Object.entries(categorizedCoins).map(([category, artistsInCategory]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [category, \" - \", expandedCategories[category] ? 'All' : 'Top 3']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleCategoryExpansion(category),\n          children: expandedCategories[category] ? 'See Less' : 'See All'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), expandedCategories[category] ? artistsInCategory.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-with-text-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"left-image\",\n              src: artistData[artist.name]['image'],\n              alt: artist.name,\n              onClick: () => {\n                selectArtist(artist.name);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: artist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Price: $\", artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Market Cap: $\", artistData[artist.name]['coins'] * artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }, this)) : artistsInCategory.slice(0, 3).map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-with-text-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"left-image\",\n              src: artistData[artist.name]['image'],\n              alt: artist.name,\n              onClick: () => {\n                selectArtist(artist.name);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: artist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Price: $\", artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Market Cap: $\", artistData[artist.name]['coins'] * artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this))]\n      }, category, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  } else {\n    ArtistTab();\n    return ArtistTab2();\n  }\n  ;\n};\n_s(CoinList, \"dLFRZdh5x8KPADITsrDp3ELBYAU=\");\n_c = CoinList;\nexport default CoinList;\nvar _c;\n$RefreshReg$(_c, \"CoinList\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CoinList","_s","expandedCategories","setExpandedCategories","curArtist","setCurArtist","followers","setEm","token","setToken","buyAmount","setBuyAmount","sellAmount","setSellAmount","balance","setBalance","selectArtist","artist","handleClick","get","then","response","setData","data","artistData","catch","error","resetArtist","setFollowers","categorizedCoins","largeCapArtists","Object","keys","sort","a","b","map","name","image","newestArtists","topGainers","mostTraded","toggleCategoryExpansion","category","prevExpanded","ArtistTab","headers","Authorization","params","q","type","artists","items","total","ArtistTab2","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","onClick","placeholder","value","onChange","e","target","handleBuy","handleSell","className","buyValue","parseInt","console","alert","sellValue","entries","artistsInCategory","index","src","alt","slice","_c","$RefreshReg$"],"sources":["/Users/chandna/ArtistX/src/CoinList.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './CoinList.css';\n\n\nconst CoinList = () => {\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const [curArtist, setCurArtist] = useState(null); // New state to track the selected artist\n  const [followers, setEm] = useState(0);\n  const [token, setToken] = useState(\"BQAS0gIidNDWLb1s-DguNT6ouDvFsBZFkl2geAG7p1C_umEa7XsFNXvGok7qTmC2zImEVL814jDdY_YEALRJMH8p9TceTGSjadJ-lLTQ7dqjKfSw0W5xASwIfyKd01YBbI3WHFD7kLGv_WVqYkLScWZ95tm62boMkLLBTQsE6E8abnMJdXI03hrlXIiS7EM\")\n  const [buyAmount, setBuyAmount] = useState('');\n  const [sellAmount, setSellAmount] = useState('');\n  const [balance, setBalance] = useState(10000);\n\n\n  const selectArtist = (artist) => {\n    // Set the current artist when an artist is selected\n    setCurArtist(artist);\n  };\n\n  const handleClick = () => {\n    axios.get('http://127.0.0.1:5000/api/getData')\n      .then(response => {\n        setData(response.data.artistData);\n        setBalance(response.data.balance);\n      })\n      .catch(error => {\n        setData(\"blocked\");\n      });\n  };\n\n\n  const resetArtist = () => {\n    // Set the current artist when an artist is selected\n    setCurArtist(null);\n  };\n  \n  const setFollowers = (followers) => {\n    setEm(followers);\n  }\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [], // Initialize as an empty array for dynamic content\n    'Most Traded': [],\n  };\n  \n  const [artistData, setData] = useState(null)\n\n  if (artistData == null) {\n    handleClick()\n    return 1\n  }\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['marketCap'] - artistData[a]['marketCap'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(artistData)\n    .sort((a, b) => artistData[a]['timeOnPlatform'] - artistData[b]['timeOnPlatform'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['growth'] - artistData[a]['growth'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n\n  const mostTraded = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['sells'] + artistData[b]['buys'] - artistData[a]['buys'] - artistData[a]['sells'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Most Traded'] = mostTraded;\n\n\n  // Combine buys and sells to calculate total trades\n\n\n  const toggleCategoryExpansion = (category) => {\n    setExpandedCategories((prevExpanded) => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category],\n    }));\n  };\n\n  const ArtistTab = async () => {\n    const {data} = await axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n            Authorization: `Bearer ${token}`\n        },\n        params: {\n          q: curArtist,\n          type: \"artist\"\n        }\n    })\n    setFollowers(data.artists.items[0].followers.total)\n  };\n\n  /*\n  const ArtistTab2 = () => {\n    return (\n      <div>\n        <h2>{curArtist}</h2>\n        <h3>Total Followers: {followers.toLocaleString('en-US')}</h3>\n        <button onClick={resetArtist}>Back to Lobby</button>\n        <input\n          type=\"number\"\n          placeholder=\"Buy Amount\"\n          value={buyAmount}\n          onChange={(e) => setBuyAmount(e.target.value)}\n        />\n        <button onClick={handleBuy}>Buy</button>\n        <input\n          type=\"number\"\n          placeholder=\"Sell Amount\"\n          value={sellAmount}\n          onChange={(e) => setSellAmount(e.target.value)}\n        />\n        <button onClick={handleSell}>Sell</button>\n      </div>\n    );\n  };\n  */\n\n  const ArtistTab2 = () => {\n    return (\n      <div>\n        <h2>{curArtist}</h2>\n        <h3>Total Followers: {followers.toLocaleString('en-US')}</h3>\n        <button onClick={resetArtist}>Back to Lobby</button>\n        <input\n          type=\"number\"\n          placeholder=\"Buy Amount\"\n          value={buyAmount}\n          onChange={(e) => setBuyAmount(e.target.value)}\n        />\n        <button onClick={handleBuy}>Buy</button>\n        <input\n          type=\"number\"\n          placeholder=\"Sell Amount\"\n          value={sellAmount}\n          onChange={(e) => setSellAmount(e.target.value)}\n        />\n        <button onClick={handleSell}>Sell</button>\n  \n        <div className=\"funnel\">\n          <div className=\"funnel-level\"></div>\n          <div className=\"funnel-level\"></div>\n          <div className=\"funnel-level\"></div>\n          <div className=\"funnel-level\"></div>\n          <div className=\"funnel-level\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleBuy = () => {\n    const buyValue = parseInt(buyAmount);\n    if (balance - buyValue * artistData[curArtist]['price'] >= 0) {\n      axios.get('http://127.0.0.1:5000/api/buy', {\n      params: {\n        artist: curArtist,\n        buyAmount: buyValue\n      },\n    })\n      .then(response => {\n        // Handle the response data\n        setData(response.data.artistData);\n        setBalance(response.data.balance);\n      })\n      .catch(error => {\n        // Handle errors\n        console.error('Error:', error);\n      });\n    }\n    else {\n      alert('not enough balance to buy this amount!')\n    }\n\n  };\n\n  const handleSell = () => {\n    const sellValue = parseInt(sellAmount);\n    if (artistData[curArtist]['held'] >= sellValue) {\n      axios.get('http://127.0.0.1:5000/api/sell', {\n      params: {\n        artist: curArtist,\n        sellAmount: sellValue\n      },\n    })\n      .then(response => {\n        // Handle the response data\n        setData(response.data.artistData);\n        setBalance(response.data.balance);\n      })\n      .catch(error => {\n        // Handle errors\n        console.error('Error:', error);\n      });\n    }\n    else {\n      alert('not enough coins to sell this amount!')\n    }\n  };\n\n  if (curArtist == null) {\n    return (\n      <div className=\"coin-list\">\n        <div className=\"balance\">\n          <h2>Balance: ${balance}</h2>\n        </div>\n        <div className=\"available\">\n          <h2>Available Coins</h2>\n        </div>\n        {Object.entries(categorizedCoins).map(([category, artistsInCategory]) => (\n          <div key={category}>\n            <h3>{category} - {expandedCategories[category] ? 'All' : 'Top 3'}</h3>\n            <button onClick={() => toggleCategoryExpansion(category)}>\n              {expandedCategories[category] ? 'See Less' : 'See All'}\n            </button>\n            <h5></h5>\n            {expandedCategories[category]\n              ? artistsInCategory.map((artist, index) => (\n                <div className=\"container\">\n                <div key={index} className=\"image-with-text-container\">\n                      <img className=\"left-image\" src={artistData[artist.name]['image']} alt={artist.name} \n                      onClick={() => {\n                        selectArtist(artist.name);\n                      }}\n                      />\n                      <div className=\"right-text\">\n                        <h2>{artist.name}</h2>\n                        <p>Price: ${artistData[artist.name]['price']}</p>\n                        <p>Market Cap: ${artistData[artist.name]['coins'] * artistData[artist.name]['price']}</p>\n                      </div>\n                </div>\n                </div>\n                ))\n              : artistsInCategory.slice(0, 3).map((artist, index) => (\n                <div className=\"container\">\n                <div key={index} className=\"image-with-text-container\">\n                      <img className=\"left-image\" src={artistData[artist.name]['image']} alt={artist.name} \n                      onClick={() => {\n                        selectArtist(artist.name);\n                      }}\n                      />\n                      <div className=\"right-text\">\n                        <h2>{artist.name}</h2>\n                        <p>Price: ${artistData[artist.name]['price']}</p>\n                        <p>Market Cap: ${artistData[artist.name]['coins'] * artistData[artist.name]['price']}</p>\n                      </div>\n                </div>\n                </div>\n                ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  else {\n    ArtistTab();\n    return ArtistTab2();\n  };\n};\n\nexport default CoinList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}