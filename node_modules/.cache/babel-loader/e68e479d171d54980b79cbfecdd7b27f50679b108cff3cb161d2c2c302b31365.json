{"ast":null,"code":"var _jsxFileName = \"/Users/chandna/ArtistX/src/CoinList.js\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './CoinList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoinList = () => {\n  _s();\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const [curArtist, setCurArtist] = useState(null); // New state to track the selected artist\n  const [followers, setEm] = useState(0);\n  const [token, setToken] = useState(\"BQDfgJF1uGDsn5KROq0Uk7BYXoHvBtH2bpbkOeKZYLiRWin_qL51GnEWXAUqcMeAcjdIE79_bMaslromsgMbVRQBiSo2vJRSr8mszAOuKg2R5Yhg-IsT5vYRgZnIunMG1C7JUxsW5gOC51Yu6DhLscq_xBsEEkv5moVUKpKDmDL4WvQdgsjBR8gMpPAafqg\");\n  const [buyAmount, setBuyAmount] = useState('');\n  const [sellAmount, setSellAmount] = useState('');\n  const [balance, setBalance] = useState(10000);\n  const selectArtist = artist => {\n    // Set the current artist when an artist is selected\n    setCurArtist(artist);\n  };\n  const handleClick = () => {\n    axios.get('http://127.0.0.1:5000/api/getData').then(response => {\n      setData(response.data);\n    }).catch(error => {\n      setData(\"blocked\");\n    });\n  };\n  const handleClick2 = () => {\n    axios.get('http://127.0.0.1:5000/api/account').then(response => {\n      setData(response.data.message);\n    }).catch(error => {\n      setData(\"blocked\");\n    });\n  };\n  const resetArtist = () => {\n    // Set the current artist when an artist is selected\n    setCurArtist(null);\n  };\n  const setFollowers = followers => {\n    setEm(followers);\n  };\n  const newBalance = balance => {\n    setBalance(balance);\n  };\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [],\n    // Initialize as an empty array for dynamic content\n    'Most Traded': []\n  };\n  const [artistData, setData] = useState(null);\n  if (artistData == null) {\n    handleClick();\n    return 1;\n  }\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData).sort((a, b) => artistData[b]['marketCap'] - artistData[a]['marketCap']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(artistData).sort((a, b) => artistData[a]['timeOnPlatform'] - artistData[b]['timeOnPlatform']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(artistData).sort((a, b) => artistData[b]['growth'] - artistData[a]['growth']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n  const mostTraded = Object.keys(artistData).sort((a, b) => artistData[b]['sells'] + artistData[b]['buys'] - artistData[a]['buys'] - artistData[a]['sells']).map(name => ({\n    name,\n    image: `url_to_${name}_image`\n  }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Most Traded'] = mostTraded;\n\n  // Combine buys and sells to calculate total trades\n\n  const toggleCategoryExpansion = category => {\n    setExpandedCategories(prevExpanded => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category]\n    }));\n  };\n  const ArtistTab = async () => {\n    const {\n      data\n    } = await axios.get(\"https://api.spotify.com/v1/search\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      params: {\n        q: curArtist,\n        type: \"artist\"\n      }\n    });\n    setFollowers(data.artists.items[0].followers.total);\n  };\n  const ArtistTab2 = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: curArtist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Followers: \", followers.toLocaleString('en-US')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetArtist,\n        children: \"Back to Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Buy Amount\",\n        value: buyAmount,\n        onChange: e => setBuyAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBuy,\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Sell Amount\",\n        value: sellAmount,\n        onChange: e => setSellAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSell,\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  };\n  const handleBuy = () => {\n    const buyValue = parseInt(buyAmount);\n    if (balance - buyValue * artistData[curArtist]['price'] >= 0) {\n      newBalance(balance - buyValue * artistData[curArtist]['price']);\n    } else {\n      alert('not enough!');\n    }\n  };\n  const handleSell = () => {\n    const sellValue = parseInt(sellAmount);\n  };\n  if (curArtist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Coins\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), Object.entries(categorizedCoins).map(([category, artistsInCategory]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [category, \" - \", expandedCategories[category] ? 'All' : 'Top 3']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleCategoryExpansion(category),\n          children: expandedCategories[category] ? 'See Less' : 'See All'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), expandedCategories[category] ? artistsInCategory.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-with-text-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"left-image\",\n              src: artistData[artist.name]['image'],\n              alt: artist.name,\n              onClick: () => {\n                selectArtist(artist.name);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: artist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Price is \", artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Number of coins is: \", artistData[artist.name]['coins']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 17\n        }, this)) : artistsInCategory.slice(0, 3).map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-with-text-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"left-image\",\n              src: artistData[artist.name]['image'],\n              alt: artist.name,\n              onClick: () => {\n                selectArtist(artist.name);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-text\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: artist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Price is \", artistData[artist.name]['price']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Number of coins is: \", artistData[artist.name]['coins']]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }, this))]\n      }, category, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this);\n  } else {\n    ArtistTab();\n    return ArtistTab2();\n  }\n  ;\n};\n_s(CoinList, \"IdyNGUfCUXWrx+7ZrX/BzuLEjS4=\");\n_c = CoinList;\nexport default CoinList;\nvar _c;\n$RefreshReg$(_c, \"CoinList\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CoinList","_s","expandedCategories","setExpandedCategories","curArtist","setCurArtist","followers","setEm","token","setToken","buyAmount","setBuyAmount","sellAmount","setSellAmount","balance","setBalance","selectArtist","artist","handleClick","get","then","response","setData","data","catch","error","handleClick2","message","resetArtist","setFollowers","newBalance","categorizedCoins","artistData","largeCapArtists","Object","keys","sort","a","b","map","name","image","newestArtists","topGainers","mostTraded","toggleCategoryExpansion","category","prevExpanded","ArtistTab","headers","Authorization","params","q","type","artists","items","total","ArtistTab2","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","onClick","placeholder","value","onChange","e","target","handleBuy","handleSell","buyValue","parseInt","alert","sellValue","className","entries","artistsInCategory","index","src","alt","slice","_c","$RefreshReg$"],"sources":["/Users/chandna/ArtistX/src/CoinList.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport './CoinList.css';\n\nconst CoinList = ({ balance, updateBalance, userCoins, curCoins, updateFunction }) => {\n  const [coins, setCoins] = useState(curCoins);\n  const [quantity, setQuantity] = useState('');\n\n  const buyCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && balance >= quantityValue) {\n      updateBalance(-quantityValue, coin.symbol, quantityValue/coin.price);\n      alert(`You've bought ${quantityValue} worth of ${coin.name} coin!`);\n\n      // Simulate a random price change after the purchase\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price + priceChange, marketcap: c.marketcap + priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough balance to buy ${coin.name} coin.`);\n    }\n  };\n\n  const sellCoin = (coin) => {\n    const quantityValue = parseFloat(quantity); // Parse quantity to a float\n\n    if (!isNaN(quantityValue) && userCoins[coin.symbol] * coin.price >= quantityValue) {\n      updateBalance(quantityValue, coin.symbol, -quantityValue/coin.price);\n      alert(`You've sold ${quantityValue} worth of ${coin.name} coin!`);\n      // Simulate a random price change after the sale\n      const updatedCoins = coins.map((c) => {\n        if (c.symbol === coin.symbol) {\n          const priceChange = (c.price * quantityValue) / c.marketcap; // Simulate a price change between -5 and +5\n          return { ...c, price: c.price - priceChange, marketcap: c.marketcap - priceChange * 1000 };\n        }\n        return c;\n      });\n\n      setCoins(updatedCoins);\n      updateFunction(updatedCoins);\n      setQuantity(''); // Reset quantity to an empty string\n    } else {\n      alert(`Not enough coins to sell ${coin.name} coin.`);\n    }\n  };\n\n  return (\n    <div className=\"stock-list\">\n      <h2>Available Coins</h2>\n      {coins.map((coin, index) => (\n        <div key={index} className=\"stock-item\">\n          <div className=\"stock-border\">\n            <img src={coin.imageurl} alt={coin.name} width=\"200\" height=\"200\" />\n            <p>{coin.name} ({coin.symbol})</p>\n            <p>Coin Price: ${coin.price.toFixed(3)}</p>\n            <p>Market Cap: ${coin.marketcap.toFixed(3)}</p>\n            <p>Your Coins: {userCoins[coin.symbol]}</p>\n            <input\n              type=\"text\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <button onClick={() => buyCoin(coin)}>Buy</button>\n            <button onClick={() => sellCoin(coin)}>Sell</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default CoinList;\n*/\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './CoinList.css';\n\n\nconst CoinList = () => {\n  const [expandedCategories, setExpandedCategories] = useState({});\n  const [curArtist, setCurArtist] = useState(null); // New state to track the selected artist\n  const [followers, setEm] = useState(0);\n  const [token, setToken] = useState(\"BQDfgJF1uGDsn5KROq0Uk7BYXoHvBtH2bpbkOeKZYLiRWin_qL51GnEWXAUqcMeAcjdIE79_bMaslromsgMbVRQBiSo2vJRSr8mszAOuKg2R5Yhg-IsT5vYRgZnIunMG1C7JUxsW5gOC51Yu6DhLscq_xBsEEkv5moVUKpKDmDL4WvQdgsjBR8gMpPAafqg\")\n  const [buyAmount, setBuyAmount] = useState('');\n  const [sellAmount, setSellAmount] = useState('');\n  const [balance, setBalance] = useState(10000);\n\n\n  const selectArtist = (artist) => {\n    // Set the current artist when an artist is selected\n    setCurArtist(artist);\n  };\n\n  const handleClick = () => {\n    axios.get('http://127.0.0.1:5000/api/getData')\n      .then(response => {\n        setData(response.data);\n      })\n      .catch(error => {\n        setData(\"blocked\");\n      });\n  };\n\n  const handleClick2 = () => {\n    axios.get('http://127.0.0.1:5000/api/account')\n      .then(response => {\n        setData(response.data.message);\n      })\n      .catch(error => {\n        setData(\"blocked\");\n      });\n  };\n\n  const resetArtist = () => {\n    // Set the current artist when an artist is selected\n    setCurArtist(null);\n  };\n  \n  const setFollowers = (followers) => {\n    setEm(followers);\n  }\n\n  const newBalance = (balance) => {\n    setBalance(balance);\n  }\n\n  // Replace placeholders with actual artist names, use an array for each category, and include image URLs\n  const categorizedCoins = {\n    'Newest Artists': [],\n    'Top Gainers': [],\n    'Large Cap': [], // Initialize as an empty array for dynamic content\n    'Most Traded': [],\n  };\n  \n  const [artistData, setData] = useState(null)\n\n  if (artistData == null) {\n    handleClick()\n    return 1\n  }\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const largeCapArtists = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['marketCap'] - artistData[a]['marketCap'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Large Cap'] = largeCapArtists;\n\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const newestArtists = Object.keys(artistData)\n    .sort((a, b) => artistData[a]['timeOnPlatform'] - artistData[b]['timeOnPlatform'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Newest Artists'] = newestArtists;\n\n  // Sort artists by market cap and select the top 3 for the 'Large Cap' category\n  const topGainers = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['growth'] - artistData[a]['growth'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Top Gainers'] = topGainers;\n\n  const mostTraded = Object.keys(artistData)\n    .sort((a, b) => artistData[b]['sells'] + artistData[b]['buys'] - artistData[a]['buys'] - artistData[a]['sells'])\n    .map((name) => ({ name, image: `url_to_${name}_image` }));\n\n  // Update 'Large Cap' category with the top 3 artists\n  categorizedCoins['Most Traded'] = mostTraded;\n\n\n  // Combine buys and sells to calculate total trades\n\n\n  const toggleCategoryExpansion = (category) => {\n    setExpandedCategories((prevExpanded) => ({\n      ...prevExpanded,\n      [category]: !prevExpanded[category],\n    }));\n  };\n\n  const ArtistTab = async () => {\n    const {data} = await axios.get(\"https://api.spotify.com/v1/search\", {\n        headers: {\n            Authorization: `Bearer ${token}`\n        },\n        params: {\n          q: curArtist,\n          type: \"artist\"\n        }\n    })\n    setFollowers(data.artists.items[0].followers.total)\n  };\n\n  const ArtistTab2 = () => {\n    return (\n      <div>\n        <h2>{curArtist}</h2>\n        <h3>Total Followers: {followers.toLocaleString('en-US')}</h3>\n        <button onClick={resetArtist}>Back to Lobby</button>\n        <input\n          type=\"number\"\n          placeholder=\"Buy Amount\"\n          value={buyAmount}\n          onChange={(e) => setBuyAmount(e.target.value)}\n        />\n        <button onClick={handleBuy}>Buy</button>\n        <input\n          type=\"number\"\n          placeholder=\"Sell Amount\"\n          value={sellAmount}\n          onChange={(e) => setSellAmount(e.target.value)}\n        />\n        <button onClick={handleSell}>Sell</button>\n      </div>\n    );\n  };\n\n  const handleBuy = () => {\n    const buyValue = parseInt(buyAmount);\n    if (balance - buyValue * artistData[curArtist]['price'] >= 0) {\n      newBalance(balance - buyValue * artistData[curArtist]['price'])\n    }\n    else {\n      alert('not enough!')\n    }\n\n  };\n\n  const handleSell = () => {\n    const sellValue = parseInt(sellAmount);\n  };\n\n  if (curArtist == null) {\n    return (\n      <div className=\"coin-list\">\n        <h2>{balance}</h2>\n        <h2>Available Coins</h2>\n        {Object.entries(categorizedCoins).map(([category, artistsInCategory]) => (\n          <div key={category}>\n            <h3>{category} - {expandedCategories[category] ? 'All' : 'Top 3'}</h3>\n            <button onClick={() => toggleCategoryExpansion(category)}>\n              {expandedCategories[category] ? 'See Less' : 'See All'}\n            </button>\n            <h5></h5>\n            {expandedCategories[category]\n              ? artistsInCategory.map((artist, index) => (\n                <div className=\"container\">\n                <div key={index} className=\"image-with-text-container\">\n                      <img className=\"left-image\" src={artistData[artist.name]['image']} alt={artist.name} \n                      onClick={() => {\n                        selectArtist(artist.name);\n                      }}\n                      />\n                      <div className=\"right-text\">\n                        <h2>{artist.name}</h2>\n                        <p>Price is {artistData[artist.name]['price']}</p>\n                        <p>Number of coins is: {artistData[artist.name]['coins']}</p>\n                      </div>\n                </div>\n                </div>\n                ))\n              : artistsInCategory.slice(0, 3).map((artist, index) => (\n                <div className=\"container\">\n                <div key={index} className=\"image-with-text-container\">\n                      <img className=\"left-image\" src={artistData[artist.name]['image']} alt={artist.name} \n                      onClick={() => {\n                        selectArtist(artist.name);\n                      }}\n                      />\n                      <div className=\"right-text\">\n                        <h2>{artist.name}</h2>\n                        <p>Price is {artistData[artist.name]['price']}</p>\n                        <p>Number of coins is: {artistData[artist.name]['coins']}</p>\n                      </div>\n                </div>\n                </div>\n                ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  else {\n    ArtistTab();\n    return ArtistTab2();\n  };\n};\n\nexport default CoinList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}