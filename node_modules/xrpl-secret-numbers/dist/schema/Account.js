"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var keypairs = __importStar(require("ripple-keypairs"));
var utils = __importStar(require("../utils"));
/* Class ==================================================================== */
var Account = /** @class */ (function () {
    function Account(SecretNumbers) {
        var _this = this;
        this.account = {
            familySeed: '',
            address: '',
            keypair: {
                publicKey: '',
                privateKey: ''
            }
        };
        var asserts = function () {
            assert_1.default.strictEqual(_this.secret.length, 8);
            _this.secret.forEach(function (r, i) {
                assert_1.default.strictEqual(r.length, 6);
            });
        };
        var derive = function () {
            try {
                var entropy = utils.secretToEntropy(_this.secret);
                _this.account.familySeed = keypairs.generateSeed({ entropy: entropy });
                _this.account.keypair = keypairs.deriveKeypair(_this.account.familySeed);
                _this.account.address = keypairs.deriveAddress(_this.account.keypair.publicKey);
            }
            catch (e) {
                throw e.message;
            }
        };
        if (typeof SecretNumbers === 'string') {
            this.secret = utils.parseSecretString(SecretNumbers);
        }
        else if (Array.isArray(SecretNumbers)) {
            this.secret = SecretNumbers;
        }
        else if (Buffer.isBuffer(SecretNumbers)) {
            this.secret = utils.entropyToSecret(SecretNumbers);
        }
        else {
            this.secret = utils.randomSecret();
        }
        asserts();
        derive();
    }
    Account.prototype.getSecret = function () {
        return this.secret;
    };
    Account.prototype.getSecretString = function () {
        return this.secret.join(' ');
    };
    Account.prototype.getAddress = function () {
        return this.account.address;
    };
    Account.prototype.getFamilySeed = function () {
        return this.account.familySeed;
    };
    Account.prototype.getKeypair = function () {
        return this.account.keypair;
    };
    Account.prototype.toString = function () {
        return this.getSecretString();
    };
    return Account;
}());
exports.default = Account;
